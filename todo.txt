# Объекты
+ Создайте объект с ключами 1, 2 и 3 и значениями 'a', 'b' и 'c'. Выведите на экран все его элементы.
+ Создайте объект с ключами a, b и c и значениями 1, 2 и 3. Найдите сумму его элементов.
+ Создайте объект с ключами 1a, 2b и с-с и значениями 1, 2 и 3. Найдите сумму его элементов.
+ let obj = {'1a': 1,   'b2': 2, 'с-с': 3, 'd4': 4};  Для каких ключей данного объекта кавычки обязательны, а для каких нет?
+ let obj = {key1: 1, key2: 2, key3: 3}; Найдите сумму его элементов. Обращайтесь к элементам с помощью изученного объектного синтаксиса.
+ let obj = {'1a': 1,   'b2': 2, 'eee-': 3, 'd4': 4};  К каким элементам этого объекта допустимо обращение через свойство, а к каким - нет?
+ Создайте объект user с ключами name (имя), surname (фамилия), patronymic (отчество) и какими-то произвольными значениями. Выведите на экран фамилию, имя и отчество через пробел.
+ Создайте объект date (дата) с ключами year (год), month (месяц) и day (день) и значениями, соответствующими текущему дню. Выведите созданную дату на экран в формате 'год-месяц-день'.
+ Создайте объект с ключами a, b и c и элементами 1, 2 и 3. Сначала объявляем объект с пустыми значениями, потом заполняем.

# Многомерные массивы
+ Дан многомерны массив let arr = [ ['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l'] ];  Выведите с его помощью элементы с текстом 'l', 'e', 'g' и 'a'.
+ Дан следующий массив:  let arr = [[1, 2], [3, 4], [5, 6]]; Найдите сумму всех его элементов.
+ let arr = [ [  [1, 2], [3, 4] ],  [ [5, 6], [7, 8] ], ];  Найдите сумму всех элементов приведенного массива.
+ Дан следующий массив:  let arr = [[1, 2, 3, [4, 5, [6, 7]]], [8, [9, 10]]]; Найдите сумму всех элементов приведенного массива.

# Перебор многомерных массивов
+ Дан двухмерный массив с числами:  let arr = [[1, 2, 3], [4, 5], [6]]; С помощью вложенных циклов найдите сумму элементов этого массива.
+ Дан трехмерный массив с числами:  let arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]; С помощью вложенных циклов найдите сумму элементов этого массива.

# Заполнение многомерных массивов
+ Сформируйте с помощью двух вложенных циклов следующий массив:  [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]
+ Сформируйте с помощью двух вложенных циклов следующий массив:  [['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x'], ['x', 'x', 'x', 'x']]
+ Сформируйте с помощью трех вложенных циклов следующий массив:  [  [   [1, 2, 3, 4, 5],   [1, 2, 3, 4, 5],  ],  [   [1, 2, 3, 4, 5],   [1, 2, 3, 4, 5],  ],  [   [1, 2, 3, 4, 5],   [1, 2, 3, 4, 5],  ], ]
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  for (let j = 1; j <= 5; j++) {   arr[i].push(j);  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  arr[i] = '';    for (let j = 1; j <= 5; j++) {   arr[i].push(j);  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  arr[i];    for (let j = 1; j <= 5; j++) {   arr[i].push(j);  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  arr[j] = [];    for (let j = 1; j <= 5; j++) {   arr[i].push(j);  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr;  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j <= 5; j++) {   arr[i][j] = j + 1;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  arr[i] == [];    for (let j = 1; j <= 5; j++) {   arr[i].push(j);  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  arr = [];    for (let j = 1; j <= 5; j++) {   arr[i].push(j);  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = '';  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j <= 5; j++) {   arr[i][j] = j;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 1; j <= 5; j++) {   arr.push(j);  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  let arr = [];  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j <= 5; j++) {   arr[j][i] = j;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать двухмерный массив:  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j <= 5; j++) {   arr[i][j] = j;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Сформируйте с помощью двух вложенных циклов следующий массив:  [[1, 2], [3, 4], [5, 6], [7, 8]]
+ Сформируйте с помощью двух вложенных циклов следующий массив:  [[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]
+ Сформируйте с помощью трех вложенных циклов следующий трехмерный массив:  [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = [];  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; j++) {   arr[i][j] = k;   k++;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = []; let k = 1;  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; j++) {   arr[i][j] = k;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = []; let k = 1;  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; j++) {   arr[i][j] = k;   k--;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = []; let k;  for (let i = 0; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; j++) {   arr[i][j] = k;   k++;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = [];  for (let i = 0, k = 1; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; j++) {   arr[i][j] = k;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = [];  for (let i = 0, k = 1; i < 3; i++) {  arr[i] = [];    for (let j = 0, k++; j < 3; j++) {   arr[i][j] = k;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = [];  for (let i = 0, k = 1; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; j++; k++) {   arr[i][j] = k;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = [];  for (let i = 0, k = 1; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; j++) {   arr[i][j] = ++k;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = []; let k = 1;  for (let i = 0; i < 3; i++) {  arr[k] = [];    for (let j = 0; j < 3; j++) {   arr[i][j] = k;   k++;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.
+ Автор следующего кода хотел сделать массив [[1, 2, 3], [4, 5, 6], [7, 8, 9]]:  let arr = [];  for (let i = 0, k = 1; i < 3; i++) {  arr[i] = [];    for (let j = 0; j < 3; k++) {   arr[i][j] = k;  } }  console.log(arr); Написанный код, однако, не делает задуманного. Найдите и исправьте ошибку автора.

# Многомерные объекты
+ Дан следующий объект:  let obj = {  key1: {   key1: 1,   key2: 2,   key3: 3,  },  key2: {   key1: 4,   key2: 5,   key3: 6,  },  key3: {   key1: 7,   key2: 8,   key3: 9,  }, } Найдите сумму элементов приведенного объекта.
+ Дан следующий объект:  let obj = {  1: {   1: 'a1',   2: 'a2',   3: 'a3',  },  2: {   1: 'b1',   2: 'b2',   3: 'b3',  },  3: {   1: 'c1',   2: 'c2',   3: 'c3',  }, } Выведите на экран элемент 'b2' и элемент 'c1'.
+ Дан следующий объект:  let obj = {  key1: {   a: 1, b: 2, c: {    d: 3,    e: 4,   }, f: 5,  },  key2: {   g: 6, h: 7,  }, } Найдите сумму всех элементов-чисел.
+ Дан следующий объект:  let obj = {  1: {   1: 11,   2: 12,   3: 13,  },  2: {   1: 21,   2: 22,   3: 23,  },  3: {   1: 24,   2: 25,   3: 26,  }, } Используя циклы, найдите сумму элементов этого объекта.
+ Дан следующий объект с названиями месяцев:  let months = {  'ru': [   'январь',   'февраль',   'март',   'апрель',   'май',   'июнь',   'июль',   'август',   'сентябрь',   'октябрь',   'ноябрь',   'декабрь',  ],  'en': [   'january',   'february',   'march',   'april',   'may',   'june',   'july',   'august',   'september',   'october',   'november',   'december',  ], }; Даны также следующие переменные:  let lang = 'ru'; // может быть или 'ru' или 'en' let month = 5; // число от 0 до 12 Выведите на экран название месяца, соответствующее значениям переменных lang и month.
+ Дана вот такая структура для хранения списка дел за года, месяцы и дни:  let affairs = {  '2018': {   11: {    29: ['дело111', 'дело112', 'дело113'],    30: ['дело121', 'дело122', 'дело123'],   },   12: {    30: ['дело211', 'дело212', 'дело213'],    31: ['дело221', 'дело222', 'дело223'],   },  },  '2019': {   12: {    29: ['дело311', 'дело312', 'дело313'],    30: ['дело321', 'дело322', 'дело323'],    31: ['дело331', 'дело332', 'дело333'],   }  }, } Пусть даны также 3 переменные, содержащие год, месяц и день. Выведите дело, соответствующее значениям переменных.
+ Автор следующего кода хотел вывести элемент со значением '24':  let obj = {  key1: {   key2: '12',   key3: '13',  },  key2: {   key4: '24',   key5: '25',  }, }  let key1 = 'key2'; let key2 = 'key4'; console.log(obj['key1'][key2]); Код, однако, выводит не то, что ожидал автор. Исправьте ошибку.
+ Автор следующего кода хотел вывести элемент со значением '24':  let obj = {  key1: {   key2: '12',   key3: '13',  },  key2: {   key4: '24',   key5: '25',  }, }  let key1 = 'key2'; let key2 = 'key4'; console.log(obj.key1.key2); Код, однако, выводит не то, что ожидал автор. Исправьте ошибку.
+ Автор следующего кода хотел вывести элемент со значением '24':  let obj = {  key1: {   key2: '12',   key3: '13',  },  key2: {   key4: '24',   key5: '25',  }, }  let key1 = 'key2'; let key2 = 'key4'; console.log(obj.key1['key2']); Код, однако, выводит не то, что ожидал автор. Исправьте ошибку.
+ Автор следующего кода хотел вывести элемент со значением '24':  let obj = {  key1: {   key2: '12',   key3: '13',  },  key2: {   key4: '24',   key5: '25',  }, }  let key1 = 'key2'; console.log(obj['key1']['key4']); Код, однако, выводит не то, что ожидал автор. Исправьте ошибку.

# Комбинация массив + объект и наоборот
+ Дан следующий массив работников:  let employees = [  {   name: 'name1',   salary: 300,  },  {   name: 'name2',   salary: 400,  },  {   name: 'name3',   salary: 500,  }, ]; Выведите на экран сумму зарплат первого и второго работников.
+ Дан следующий массив студентов:  let students = {  'boys':  ['Коля', 'Вася', 'Петя'],  'girls': ['Даша', 'Маша', 'Лена'], }; Выведите на экран элемент 'Вася' и элемент 'Лена'.
+ Дан следующий массив работников:  let employees = [  {   name: 'name1',   salary: 300,  },  {   name: 'name2',   salary: 400,  },  {   name: 'name3',   salary: 500,  }, ]; Выведите на экран данные каждого работника в формате имя - зарплата.
+ Дан следующий массив работников:  let employees = [  {   name: 'name1',   salary: 300,  },  {   name: 'name2',   salary: 400,  },  {   name: 'name3',   salary: 500,  }, ]; Выведите на экран сумму зарплат всех работников.
+ Дан следующий массив работников:  let employees = [  {   name: 'name1',   salary: 300,   age: 28,  },  {   name: 'name2',   salary: 400,   age: 29,  },  {   name: 'name3',   salary: 500,   age: 30,  },  {   name: 'name4',   salary: 600,   age: 31,  },  {   name: 'name5',   salary: 700,   age: 32,  }, ]; Выведите на экран сумму зарплат тех работников, возраст которых равен или более 30 лет.
+ Дан следующий массив работников, в котором поле dismissed хранит в себе информацию о том, уволен работник или нет (true - уволен):  let employees = [  {   name: 'name1',   salary: 300,   dismissed: false,  },  {   name: 'name2',   salary: 400,   dismissed: true,  },  {   name: 'name3',   salary: 500,   dismissed: false,  },  {   name: 'name4',   salary: 600,   dismissed: true,  },  {   name: 'name5',   salary: 700,   dismissed: false,  }, ]; Выведите на экран имена и зарплаты неуволенных работников.
+ Дана следующая структура с данными:  let data = {  1: [   'data11',   'data12',   'data13',  ],  2: [   'data21',   'data22',   'data23',  ],  3: [   'data31',   'data32',   'data33',   'data34',   'data35',  ],  4: [   'data41',   'data42',  ], }; С помощью вложенных циклов выведите на экран все строки с данными.
+ Дана следующая структура с данными:  let data = [  {   1: 'data11',   2: 'data12',   3: 'data13',   4: 'data14',  },  {   1: 'data21',   2: 'data22',   3: 'data33',  },  {   1: 'data31',   2: 'data32',  }, ]; Количество объектов в массиве и количество элементов в объекте может быть произвольным.  С помощью вложенных циклов выведите на экран все строки с данными.
+ Дана следующая структура с данными:  let data = [  {   1: [    'data111',    'data112',    'data113',   ],   2: [    'data121',    'data122',    'data123',   ],  },  {   1: [    'data211',    'data212',    'data213',   ],   2: [    'data221',    'data222',    'data223',    'data224',   ],   3: [    'data231',    'data232',    'data233',    'data234',    'data235',   ],  },  {   1: [    'data411',    'data412',    'data413',   ],   2: [    'data421',   ],  }, ]; С помощью вложенных циклов выведите на экран все строки с данными.

# Добавление элементов в многомерные массивы
+ Дан следующий массив с юзерами: let users = [  {   name: 'name1',   surname: 'surname1',   age: 30,  },  {   name: 'name2',   surname: 'surname2',   age: 31,  },  {   name: 'name2',   surname: 'surname2',   age: 32,  }, ];  Добавьте в этот массив еще одного юзера.

# Добавление элементов в многомерные объекты
+ Дана вот такая структура для хранения списка дел за определенные даты: let affairs = {  '2019-12-28': ['дело11', 'дело12', 'дело13'],  '2019-12-39': ['дело21', 'дело22', 'дело23'],  '2019-12-30': ['дело31', 'дело32', 'дело33'], }  Добавьте еще одно дело в дату '2019-12-29'. Добавьте еще два дела в дату '2019-12-31'.
+ Добавьте нового студента в подгруппу 'subgroup11'. Объект брать из теории.
+ Добавьте в первую группу еще одну подгруппу. Объект брать из теории.
+ Сделайте четвертую группу, в ней сделайте подгруппу и добавьте в нее двух новых студентов. Объект брать из  теории.
+ Дана вот такая структура для хранения списка дел за определенные даты: let affairs = {  '2019-12-28': ['дело11', 'дело12', 'дело13'],  '2019-12-39': ['дело21', 'дело22', 'дело23'],  '2019-12-30': ['дело31', 'дело32', 'дело33'], }  Сделайте функцию addAffair, которая будет добавлять новое дело в заданную дату. Пусть функция первым параметром принимает дату, а вторым - дело.
+ Дана вот такая структура для хранения студентов: let students = {  'group1' {   'subgroup11': [    'student111', 'student112', 'student113'],    'subgroup12': [    'student121', 'student122', 'student123'],   },  'group2' {   'subgroup21': [    'student211', 'student212', 'student213'],    'subgroup22': [    'student221', 'student222', 'student223'],   },  'group3' {   'subgroup31': [    'student311', 'student312', 'student313'],    'subgroup32': [    'student321', 'student322', 'student323'],   }, };  Сделайте функцию addStudent, которая будет добавлять нового студента. Пусть функция первым параметром принимает группу, а вторым - подгруппу, а третьим - имя студента.
+ Дана вот такая структура для хранения списка дел за года, месяцы и дни: let affairs = {  2018: {   11: {    29: ['дело111', 'дело112', 'дело113'],    30: ['дело121', 'дело122', 'дело123'],   },   12: {    30: ['дело211', 'дело212', 'дело213'],    31: ['дело221', 'дело222', 'дело223'],   },  },  2019: {   12: {    29: ['дело311', 'дело312', 'дело313'],    30: ['дело321', 'дело322', 'дело323'],    31: ['дело331', 'дело332', 'дело333'],   }  }, }  Сделайте функцию addAffair, которая будет добавлять новое дело в заданную дату. Пусть функция первым параметром принимает год, вторым - месяц, третьим - день, а четвертым - дело.

# Практика на многомерные массивы
+ Дан такой объект: let data = {  2018: {   11: {    29: [1, 2, 3],    30: [4, 5],   },   12: {    30: [6, 7],    31: [8, 9],   },  },  2019: {   12: {    29: [10, 11],    30: [12, 13],    31: [14, 15],   }  }, }  Запишите все элементы этого объекта в какой-нибудь массив, вот так: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
+ Дан массив: let affairs = [  {   date:  '2019-12-29'   event: 'name1'  },  {   date:  '2019-12-31'   event: 'name2'  },  {   date:  '2019-12-29'   event: 'name3'  },  {   date:  '2019-12-30'   event: 'name4'  },  {   date:  '2019-12-29'   event: 'name5'  },  {   date:  '2019-12-31'   event: 'name6'  },  {   date:  '2019-12-29'   event: 'name7'  },  {   date:  '2019-12-30'   event: 'name8'  },  {   date:  '2019-12-30'   event: 'name9'  }, ]  Получите из этого массива уникальные даты, то есть вот так: ['2019-12-29', '2019-12-30', '2019-12-31']
+ Дан такой массив с юзерами: let users = [  {   name: 'name1',   age: 31,   active: true,  },  {   name: 'name2',   age: 32,   active: false,  },  {   name: 'name3',   age: 33,   active: true,  },  {   name: 'name4',   age: 34,   active: false,  },  {   name: 'name5',   age: 35,   active: true,  }, ];  Выведите на экран тех юзеров, значение ключа active для которых равно true.
+ Даны города и их страны следующей структуре: let data = [  {   country: 'Россия',   city:    'Москва',  },  {   country: 'Беларусь',   city:    'Минск',  },  {   country: 'Россия',   city:    'Питер',  },  {   country: 'Россия',   city:    'Владивосток',  },  {   country: 'Украина',   city:    'Львов',  },  {   country: 'Беларусь',   city:    'Могилев',  },  {   country: 'Украина',   city:    'Киев',  }, ];  Подсчитайте количество стран.
+ Дан такой список дел за определенную дату: let affairs = {  '2019-12-31': ['массив дел'],  '2018-11-29': ['массив дел'],  '2018-11-30': ['массив дел'],  '2018-12-27': ['массив дел'],  '2019-12-29': ['массив дел'],  '2019-12-30': ['массив дел'],  '2018-12-30': ['массив дел'],  '2018-12-31': ['массив дел'], }  Выведите на экран все дела за 2018 год.  Выведите на экран все дела за 12 месяц 2018 года.
+ Дан такой массив с юзерами: let users = [  {   name: 'name1',   active: true,  },  {   name: 'name2',   active: false,  },  {   name: 'name3',   active: true,  },  {   name: 'name4',   active: false,  },  {   name: 'name5',   active: true,  }, ];  Сделайте две функции, которые будут менять значение поля active: первая функция пусть меняет на true, а вторая - на false.  Пусть наши функции параметрами принимают данный массив и номер юзера, над которым следует произвести изменения.  Пусть функции возвращают измененный массив.

# Удобное хранение данных
+ Даны данные в следующей структуре:  let data = [  {   country: 'Россия',   city:    'Москва',  },  {   country: 'Беларусь',   city:    'Минск',  },  {   country: 'Россия',   city:    'Питер',  },  {   country: 'Россия',   city:    'Владивосток',  },  {   country: 'Украина',   city:    'Львов',  },  {   country: 'Беларусь',   city:    'Могилев',  },  {   country: 'Украина',   city:    'Киев',  }, ]; Вам известно, что вам нужно будет получать массивы городов определенных стран. К примеру, нужно будет получить все города России, либо все города Беларуси. Также необходимо будет находить количество городов в определенной стране.  Решите поставленные задачи для текущей структуры хранения данных.  После этого ответьте на вопрос, удобна ли такая структура данных для решения поставленных задач?  Переделайте структуру на более удобную. Напишите решения поставленных задач для новой структуры данных.
+ Дан список каких-то данных за определенные даты, хранящийся в следующей структуре:  let data = [  {   year:  2019,   month: 11,   day: 20,   data: ['массив с данными']  },  {   year:  2019,   month: 11,   day: 21,   data: ['массив с данными']  },  {   year:  2019,   month: 12,   day: 25,   data: ['массив с данными']  },  {   year:  2019,   month: 12,   day: 26,   data: ['массив с данными']  },  {   year:  2020,   month: 10,   day: 29,   data: ['массив с данными']  },  {   year:  2020,   month: 10,   day: 30,   data: ['массив с данными']  },  {   year:  2020,   month: 11,   day: 19,   data: ['массив с данными']  },  {   year:  2020,   month: 11,   day: 20,   data: ['массив с данными']  }, ] Пусть вам нужно будет получать данные за определенный день, за определенный месяц, и за определенный год. Удобна ли текущая структура хранения данных для этого?  Если да, оставьте все как есть, если нет, переделайте структуру на более удобную. Получите затем все данные за 2020 год.
+ Дана следующая структура для хранения событий и их дат:  let affairs = [  {   date:  '2019-12-29'   event: 'name1'  },  {   date:  '2019-12-31'   event: 'name2'  },  {   date:  '2019-12-29'   event: 'name3'  },  {   date:  '2019-12-30'   event: 'name4'  },  {   date:  '2019-12-29'   event: 'name5'  },  {   date:  '2019-12-31'   event: 'name6'  },  {   date:  '2019-12-29'   event: 'name7'  },  {   date:  '2019-12-30'   event: 'name8'  },  {   date:  '2019-12-30'   event: 'name9'  }, ] Пусть вам нужно будет получать список событий за определенную дату. Удобна ли текущая структура хранения данных для этого?  Если да, оставьте все как есть, если нет, переделайте структуру на более удобную. Получите затем список событий за '2019-12-30'.
+ Пусть перед вами стоит задача хранения гороскопов для знаков зодиака. Гороскопы хранятся на несколько месяцев вперед.  Необходимо будет получать гороскопы всех знаков зодиака за определенный день, а также гороскоп конкретного знака зодиака за определенный день.  Продумайте удобную структуру хранения данных. Укажите ее преимущества и недостатки. Поясните, для решения каких задач придуманная вами структура будет неудобна.
- Пусть перед вами стоит задача хранения списка учеников какой-то школы. Нужно будет хранить имя, фамилию и отчество каждого ученика за все 11 классов школы.  Необходимо будет получать список учеников за определенный класс, например, всех учеников 10-го класса или всех учеников 11-го класса. Также необходимо будет получать учеников за определенную параллель, например, всех учеников 10А класса или всех учеников 10Б класса.  Продумайте удобную структуру хранения данных. Укажите ее преимущества и недостатки. Поясните, для решения каких задач придуманная вами структура будет неудобна.
- Пусть перед вами стоит задача хранения списка дел на сегодня. Нужно будет хранить название дела и пометку о том, выполнено уже это дело или нет.  Необходимо будет получать и выводить на экран список дел, помечая рядом с названием выполнено это дело или нет.  Продумайте удобную структуру хранения данных. Укажите ее преимущества и недостатки. Поясните, для решения каких задач придуманная вами структура будет неудобна.

